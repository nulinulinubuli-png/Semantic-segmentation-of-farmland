from dataloaders.datasets import  pascal,  pascal2, pascal2orgin, pascal4from torch.utils.data import DataLoaderdef make_data_loader(args, **kwargs):    if args.dataset in ('',''):        train_set = pascal.VOCSegmentation(args, split='train')        val_set = pascal.VOCSegmentation(args, split='val')        pred_set = pascal.VOCSegmentation(args, split='test')        file_list = pred_set.firename        num_class = train_set.NUM_CLASSES        train_loader = DataLoader(train_set, batch_size=args.batch_size, shuffle=True, **kwargs)        val_loader = DataLoader(val_set, batch_size=args.batch_size, shuffle=False, **kwargs)        test_loader = DataLoader(pred_set, batch_size=args.batch_size, shuffle=False, **kwargs)        return train_loader, val_loader, test_loader, num_class, file_list    elif args.dataset in ('','' ):        # print("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")        train_set = pascal2.VOCSegmentation(args, split='train')        val_set = pascal2.VOCSegmentation(args, split='val')        pred_set = pascal2.VOCSegmentation(args, split='test')        file_list = pred_set.firename        num_class = train_set.NUM_CLASSES        train_loader = DataLoader(train_set, batch_size=args.batch_size, shuffle=True, **kwargs)        val_loader = DataLoader(val_set, batch_size=args.batch_size, shuffle=False, **kwargs)        test_loader = DataLoader(pred_set, batch_size=args.batch_size, shuffle=False, **kwargs)        return train_loader, val_loader, test_loader, num_class, file_list    elif args.dataset in ('pascalHelan','pascalRregular' ):        # print("CCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC")        train_set = pascal4.VOCSegmentation(args, split='train')        val_set = pascal4.VOCSegmentation(args, split='val')        pred_set = pascal4.VOCSegmentation(args, split='test')        file_list = pred_set.firename        num_class = train_set.NUM_CLASSES        train_loader = DataLoader(train_set, batch_size=args.batch_size, shuffle=True, **kwargs)        val_loader = DataLoader(val_set, batch_size=args.batch_size, shuffle=False, **kwargs)        test_loader = DataLoader(pred_set, batch_size=args.batch_size, shuffle=False, **kwargs)        return train_loader, val_loader, test_loader, num_class, file_list    elif args.dataset in ('pascalIrregular',):        train_set = pascal2orgin.VOCSegmentation(args, split='train')        val_set = pascal2orgin.VOCSegmentation(args, split='val')        pred_set = pascal2orgin.VOCSegmentation(args, split='test')        file_list = pred_set.firename        num_class = train_set.NUM_CLASSES        train_loader = DataLoader(train_set, batch_size=args.batch_size, shuffle=True, **kwargs)        val_loader = DataLoader(val_set, batch_size=args.batch_size, shuffle=False, **kwargs)        test_loader = DataLoader(pred_set, batch_size=args.batch_size, shuffle=False, **kwargs)        return train_loader, val_loader, test_loader, num_class, file_list    else:        raise NotImplementedError